# Stubs for flask.app (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from .helpers import _PackageBoundObject as _PackageBoundObject, url_for as url_for, get_flashed_messages as get_flashed_messages, locked_cached_property as locked_cached_property, _endpoint_from_view_func as _endpoint_from_view_func, find_package as find_package, get_debug_flag as get_debug_flag
from .wrappers import Request as Request, Response as Response
from .config import ConfigAttribute as ConfigAttribute, Config as Config
from .ctx import RequestContext as RequestContext, AppContext as AppContext, _AppCtxGlobals as _AppCtxGlobals
from .globals import _request_ctx_stack as _request_ctx_stack, request as request, session as session, g as g
from .sessions import SecureCookieSessionInterface as SecureCookieSessionInterface
from .templating import DispatchingJinjaLoader as DispatchingJinjaLoader, Environment as Environment, _default_template_ctx_processor as _default_template_ctx_processor
from .signals import request_started as request_started, request_finished as request_finished, got_request_exception as got_request_exception, request_tearing_down as request_tearing_down, appcontext_tearing_down as appcontext_tearing_down
from ._compat import reraise as reraise, string_types as string_types, text_type as text_type, integer_types as integer_types

def setupmethod(f): ...

class Flask(_PackageBoundObject):
    request_class = ...  # type: Any
    response_class = ...  # type: Any
    jinja_environment = ...  # type: Any
    app_ctx_globals_class = ...  # type: Any
    request_globals_class = ...  # type: Any
    config_class = ...  # type: Any
    debug = ...  # type: Any
    testing = ...  # type: Any
    secret_key = ...  # type: Any
    session_cookie_name = ...  # type: Any
    permanent_session_lifetime = ...  # type: Any
    send_file_max_age_default = ...  # type: Any
    use_x_sendfile = ...  # type: Any
    logger_name = ...  # type: Any
    json_encoder = ...  # type: Any
    json_decoder = ...  # type: Any
    jinja_options = ...  # type: Any
    default_config = ...  # type: Any
    url_rule_class = ...  # type: Any
    test_client_class = ...  # type: Any
    session_interface = ...  # type: Any
    static_url_path = ...  # type: Any
    static_folder = ...  # type: Any
    instance_path = ...  # type: Any
    config = ...  # type: Any
    view_functions = ...  # type: Any
    error_handler_spec = ...  # type: Any
    url_build_error_handlers = ...  # type: Any
    before_request_funcs = ...  # type: Any
    before_first_request_funcs = ...  # type: Any
    after_request_funcs = ...  # type: Any
    teardown_request_funcs = ...  # type: Any
    teardown_appcontext_funcs = ...  # type: Any
    url_value_preprocessors = ...  # type: Any
    url_default_functions = ...  # type: Any
    template_context_processors = ...  # type: Any
    shell_context_processors = ...  # type: Any
    blueprints = ...  # type: Any
    extensions = ...  # type: Any
    url_map = ...  # type: Any
    cli = ...  # type: Any
    def __init__(self, import_name, static_path=None, static_url_path=None, static_folder='', template_folder='', instance_path=None, instance_relative_config=False, root_path=None): ...
    error_handlers = ...  # type: Any
    def name(self): ...
    @property
    def propagate_exceptions(self): ...
    @property
    def preserve_context_on_exception(self): ...
    @property
    def logger(self): ...
    def jinja_env(self): ...
    @property
    def got_first_request(self): ...
    def make_config(self, instance_relative=False): ...
    def auto_find_instance_path(self): ...
    def open_instance_resource(self, resource, mode=''): ...
    def create_jinja_environment(self): ...
    def create_global_jinja_loader(self): ...
    def init_jinja_globals(self): ...
    def select_jinja_autoescape(self, filename): ...
    def update_template_context(self, context): ...
    def make_shell_context(self): ...
    def run(self, host=None, port=None, debug=None, **options): ...
    def test_client(self, use_cookies=True, **kwargs): ...
    def open_session(self, request): ...
    def save_session(self, session, response): ...
    def make_null_session(self): ...
    def register_blueprint(self, blueprint, **options): ...
    def iter_blueprints(self): ...
    def add_url_rule(self, rule, endpoint=None, view_func=None, **options): ...
    def route(self, rule, **options): ...
    def endpoint(self, endpoint): ...
    def errorhandler(self, code_or_exception): ...
    def register_error_handler(self, code_or_exception, f): ...
    def template_filter(self, name=None): ...
    def add_template_filter(self, f, name=None): ...
    def template_test(self, name=None): ...
    def add_template_test(self, f, name=None): ...
    def template_global(self, name=None): ...
    def add_template_global(self, f, name=None): ...
    def before_request(self, f): ...
    def before_first_request(self, f): ...
    def after_request(self, f): ...
    def teardown_request(self, f): ...
    def teardown_appcontext(self, f): ...
    def context_processor(self, f): ...
    def shell_context_processor(self, f): ...
    def url_value_preprocessor(self, f): ...
    def url_defaults(self, f): ...
    def handle_http_exception(self, e): ...
    def trap_http_exception(self, e): ...
    def handle_user_exception(self, e): ...
    def handle_exception(self, e): ...
    def log_exception(self, exc_info): ...
    def raise_routing_exception(self, request): ...
    def dispatch_request(self): ...
    def full_dispatch_request(self): ...
    def try_trigger_before_first_request_functions(self): ...
    def make_default_options_response(self): ...
    def should_ignore_error(self, error): ...
    def make_response(self, rv): ...
    def create_url_adapter(self, request): ...
    def inject_url_defaults(self, endpoint, values): ...
    def handle_url_build_error(self, error, endpoint, values): ...
    def preprocess_request(self): ...
    def process_response(self, response): ...
    def do_teardown_request(self, exc=...): ...
    def do_teardown_appcontext(self, exc=...): ...
    def app_context(self): ...
    def request_context(self, environ): ...
    def test_request_context(self, *args, **kwargs): ...
    def wsgi_app(self, environ, start_response): ...
    def __call__(self, environ, start_response): ...
